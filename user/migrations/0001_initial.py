# Generated by Django 3.2.3 on 2021-06-09 13:33

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.expressions
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=32, verbose_name='真实姓名')),
                ('nickname', models.CharField(max_length=32, verbose_name='昵称')),
                ('school', models.CharField(max_length=32, verbose_name='学校')),
                ('stuid', models.CharField(max_length=32, verbose_name='学号')),
                ('major', models.CharField(max_length=32, verbose_name='专业')),
                ('grade', models.CharField(max_length=32, verbose_name='年级')),
                ('describe', models.CharField(max_length=1024, verbose_name='自我描述')),
                ('email', models.EmailField(blank=True, max_length=255, null=True, verbose_name='邮箱')),
                ('avatar', models.URLField(default='', verbose_name='用户头像')),
                ('gender', models.CharField(choices=[('2', '未知'), ('1', '男'), ('0', '女')], default='未知', max_length=4, verbose_name='性别')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='注册时间')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户信息',
                'verbose_name_plural': '用户信息',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='LoginRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('login_time', models.DateTimeField(auto_now=True, verbose_name='登录时间')),
                ('ip', models.GenericIPAddressField(default='0.0.0.0', verbose_name='访问IP')),
                ('uid', models.ForeignKey(db_column='uid', on_delete=django.db.models.expressions.Case, related_name='uid', to=settings.AUTH_USER_MODEL, verbose_name='用户id')),
            ],
            options={
                'verbose_name': '登录记录',
                'verbose_name_plural': '登录记录',
            },
        ),
    ]
